package org.example.trendyolfinalproject.service.impl;

import jakarta.mail.MessagingException;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.example.trendyolfinalproject.client.EmailClient;
import org.example.trendyolfinalproject.dao.entity.Order;
import org.example.trendyolfinalproject.dao.entity.ResetCode;
import org.example.trendyolfinalproject.dao.repository.*;
import org.example.trendyolfinalproject.exception.customExceptions.AlreadyException;
import org.example.trendyolfinalproject.exception.customExceptions.NotFoundException;
import org.example.trendyolfinalproject.mapper.UserMapper;
import org.example.trendyolfinalproject.model.enums.NotificationType;
import org.example.trendyolfinalproject.model.request.UserRequest;
import org.example.trendyolfinalproject.model.response.ApiResponse;
import org.example.trendyolfinalproject.model.response.SellerResponse;
import org.example.trendyolfinalproject.model.response.UserProfileResponse;
import org.example.trendyolfinalproject.model.response.UserResponse;
import org.example.trendyolfinalproject.service.AuditLogService;
import org.example.trendyolfinalproject.service.EmailService;
import org.example.trendyolfinalproject.service.NotificationService;
import org.example.trendyolfinalproject.service.UserService;
import org.example.trendyolfinalproject.util.JwtUtil;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.List;
import java.util.Random;

@AllArgsConstructor
@Service
@Slf4j
public class UserServiceImpl implements UserService {

    private final UserRepository userRepository;
    private final EmailService emailService;
    private final BasketRepository basketRepository;
    private final PaymentMethodRepository paymentMethodRepository;
    private final WishlistRepository wishlistRepository;
    private final OrderRepository orderRepository;
    private final SellerFollowRepository sellerFollowRepository;
    private PasswordEncoder passwordEncoder;
    private final AuditLogService auditLogService;
    private final UserMapper userMapper;
    private final JwtUtil jwtUtil;
    private final NotificationService notificationService;
    private final AdressRepository adressRepository;
    private final EmailClient emailClient;
    private final ResetCodeRepository resetCodeRepository;

//
//    @Override
//    public ApiResponse<String> registerUser(UserRegisterRequest userRegisterRequest) {
//        log.info("Actionlog.registerUser.start : ");
//        var existingUser = userRepository.findByEmail(userRegisterRequest.getEmail());
//        if (existingUser.isPresent()) {
//            throw new EmailAlreadyExistsException("User already exists with this email " + userRegisterRequest.getEmail());
//        }
//
//        var existsEmail = emailClient.checkEmailExists(userRegisterRequest.getEmail());
//        if (!existsEmail) {
//            throw new RuntimeException("Email is not available");
//        }
//        if (!userRegisterRequest.getPassword().equals(userRegisterRequest.getConfirmedPassword())) {
//            throw new VerifyEmailException("Password and confirmed password do not match");
//        }
//
//        var existingPhone = userRepository.existsUserByPhoneNumber(userRegisterRequest.getPhoneNumber());
//
//        if (existingPhone) {
//            throw new AlreadyException("User already exists with this phone number : " + userRegisterRequest.getPhoneNumber());
//        }
//        String otp = generateOtp();
//        ResetCode resetCode = new ResetCode();
//        resetCode.setEmail(userRegisterRequest.getEmail());
//        resetCode.setCode(otp);
//        resetCode.setExpireTime(LocalDateTime.now().plusMinutes(5));
//        resetCodeRepository.save(resetCode);
//
//        emailService.sendOtp(userRegisterRequest.getEmail(), otp);
//
//        log.info("Actionlog.registerUser.end : ");
//        return ApiResponse.<String>builder()
//                .status(HttpStatus.OK.value())
//                .message("OTP sent successfully")
//                .data("Otp sent to " + userRegisterRequest.getEmail())
//                .build();
//    }
//
//    @Transactional
//    @Override
//    public ApiResponse<AuthResponse> verifyOtp(VerifyAndRegisterRequest verifyAndRegisterRequest) {
//        log.info("Actionlog.verifyOtp.start : ");
//
//        List<ResetCode> expiredCodes = resetCodeRepository.findAllByEmailAndExpireTimeBefore(verifyAndRegisterRequest.getVerifyRequest().getEmail(), LocalDateTime.now());
//        resetCodeRepository.deleteAll(expiredCodes);
//
//        ResetCode resetCode = resetCodeRepository.findByEmailAndCode(verifyAndRegisterRequest.getVerifyRequest().getEmail(), verifyAndRegisterRequest.getVerifyRequest().getCode())
//                .orElseThrow(() -> new VerifyEmailException("Invalid OTP"));
//
//        if (resetCode.getExpireTime().isBefore(LocalDateTime.now())) {
//            throw new VerifyEmailException("OTP has expired");
//        }
//        resetCodeRepository.delete(resetCode);
//
//        var user = userMapper.toEntity(verifyAndRegisterRequest.getUserRegisterRequest());
//        user.setEmail(verifyAndRegisterRequest.getVerifyRequest().getEmail());
//        user.setPasswordHash(passwordEncoder.encode(verifyAndRegisterRequest.getUserRegisterRequest().getPassword()));
//        user.setRole(Role.CUSTOMER);
//        user.setPhoneNumber(verifyAndRegisterRequest.getUserRegisterRequest().getPhoneNumber());
//        user.setDateOfBirth(verifyAndRegisterRequest.getUserRegisterRequest().getDateOfBirth());
//
//        var savedUser = userRepository.save(user);
//
//        var basket = new Basket();
//        basket.setUser(savedUser);
//        basket.setCreatedAt(LocalDateTime.now());
//        basket.setUpdatedAt(LocalDateTime.now());
//        basketRepository.save(basket);
//
//        auditLogService.createAuditLog(savedUser, "Sign up", "User registered successfully. User id: " + savedUser.getId());
//
//        String accessToken = jwtUtil.generateAccessToken(verifyAndRegisterRequest.getVerifyRequest().getEmail(), savedUser.getId());
//        String refreshToken = jwtUtil.generateRefreshToken(verifyAndRegisterRequest.getVerifyRequest().getEmail(), savedUser.getId());
//        auditLogService.createAuditLog(savedUser, "Verify otp", "User verified successfully. User id: " + savedUser.getId());
//
//        notificationService.sendToAdmins("New user registered", NotificationType.USER_REGISTER, savedUser.getId());
//        notificationService.sendNotification(savedUser, "Welcome to Trendyol", NotificationType.WELCOME, savedUser.getId());
//
//        log.info("Actionlog.verifyOtp.end : ");
//        return ApiResponse.<AuthResponse>builder()
//                .status(HttpStatus.CREATED.value())
//                .message("User registered successfully")
//                .data(new AuthResponse(accessToken, refreshToken))
//                .build();
//    }


    @Override
    public ApiResponse<UserResponse> updateUser(UserRequest userRequest) {
        log.info("Actionlog.updateUser.start : ");

        var userId = getCurrentUserId();
        var user = userRepository.findById(userId).orElseThrow(() -> new NotFoundException("User not found with id: " + userId));
        var now = LocalDateTime.now();
        long daysBetween = ChronoUnit.DAYS.between(user.getUpdatedAt(), now);
        if (daysBetween < 7) {
            throw new RuntimeException("You can update your info once a week");
        }
        var existingPhoneNumber = userRepository.existsUserByPhoneNumber(userRequest.getPhoneNumber());
        user.setName(userRequest.getName());
        user.setSurname(userRequest.getSurname());
        if (!existingPhoneNumber) {
            user.setPhoneNumber(userRequest.getPhoneNumber());
        } else {
            throw new RuntimeException("Phone number already exists");
        }
        var saved = userRepository.save(user);
        var response = userMapper.toUserResponse(saved);
        auditLogService.createAuditLog(user, "Update User", "User updated own info successfully. User id: " + user.getId());
        notificationService.sendNotification(user, "Your account updated  successfully. Your account name " + user.getName(), NotificationType.USER_UPDATE, user.getId());
        log.info("Actionlog.updateUser.end : ");
        return ApiResponse.<UserResponse>builder()
                .status(HttpStatus.OK.value())
                .message("User updated successfully")
                .data(response)
                .build();
    }

    @Override
    public ApiResponse<UserResponse> patchUpdateUser(UserRequest userRequest) {
        log.info("Actionlog.patchUpdateUser.start : ");

        var userId = getCurrentUserId();
        var user = userRepository.findById(userId).orElseThrow(() -> new NotFoundException("User not found with id: " + userId));
        if (userRequest.getName() != null) {
            user.setName(userRequest.getName());
        }
        if (userRequest.getSurname() != null) {
            user.setSurname(userRequest.getSurname());
        }
        var existingPhoneNumber = userRepository.existsUserByPhoneNumber(userRequest.getPhoneNumber());

        if (userRequest.getPhoneNumber() != null) {
            if (existingPhoneNumber) {
                throw new AlreadyException("User already exists with this phone number : " + userRequest.getPhoneNumber());
            }
            user.setPhoneNumber(userRequest.getPhoneNumber());
        }
        if (userRequest.getDateOfBirth() != null) {
            user.setDateOfBirth(LocalDate.parse(userRequest.getDateOfBirth()));
        }
        var saved = userRepository.save(user);
        var response = userMapper.toUserResponse(saved);

        auditLogService.createAuditLog(user, "Update User", "User updated own info successfully. User id: " + user.getId());
        notificationService.sendNotification(user, "Your account updated  successfully. Your account name " + user.getName(), NotificationType.USER_UPDATE, user.getId());
        log.info("Actionlog.patchUpdateUser.end : ");
        return ApiResponse.<UserResponse>builder()
                .status(HttpStatus.OK.value())
                .message("User updated successfully")
                .data(response)
                .build();
    }


    @Override
    public ApiResponse<String> updateEmail(String newEmail) {
        log.info("Actionlog.updateEmail.start : ");
        var userId = getCurrentUserId();
        var user = userRepository.findById(userId)
                .orElseThrow(() -> new NotFoundException("User not found with id: " + userId));

        var exist = userRepository.findByEmail(newEmail).orElse(null);
        if (exist != null) {
            throw new AlreadyException("Email already exists");
        }
        if (user.getEmail().equals(newEmail)) {
            throw new AlreadyException("Email already exists");
        }
        var existsInEmailPool = emailClient.checkEmailExists(newEmail);
        if (!existsInEmailPool) {
            throw new NotFoundException("Email is not available");
        }
        String otp = generateOtp();
        ResetCode resetCode = new ResetCode();
        resetCode.setEmail(newEmail);
        resetCode.setCode(otp);
        resetCode.setExpireTime(LocalDateTime.now().plusMinutes(5));
        resetCodeRepository.save(resetCode);
        emailService.sendOtp(newEmail, otp);
        log.info("Actionlog.updateEmail.end : ");
        return ApiResponse.<String>builder()
                .status(HttpStatus.OK.value())
                .message("Otp sent for email verification")
                .data("Otp sent to " + newEmail)
                .build();
    }

    @Override
    public ApiResponse<String> verifyEmail(String newEmail, String otp) {
        log.info("Actionlog.verifyEmail.start : ");
        var userId = getCurrentUserId();
        var user = userRepository.findById(userId)
                .orElseThrow(() -> new NotFoundException("User not found with id: " + userId));

        ResetCode resetCode = resetCodeRepository.findByEmailAndCode(newEmail, otp)
                .orElseThrow(() -> new RuntimeException("Invalid OTP"));

        if (resetCode.getExpireTime().isBefore(LocalDateTime.now())) {
            throw new RuntimeException("OTP expired");
        }
        resetCodeRepository.delete(resetCode);
        String oldEmail = user.getEmail();
        user.setEmail(newEmail);
        user.setUpdatedAt(LocalDateTime.now());
        var saved = userRepository.save(user);
        auditLogService.createAuditLog(user, "Update User Email",
                "User updated own info successfully. User id: " + user.getId());

        emailService.sendEmail(user.getEmail(), "Update Account Info",
                "Your account updated successfully. Your account name " + user.getName());
        notificationService.sendNotification(user, "Your email has been updated!", NotificationType.EMAIL_UPDATE, user.getId());
        emailService.sendEmail(oldEmail, "Update Account Info",
                "Your email has been updated to " + newEmail);
        emailService.sendEmail(newEmail, "Your email address has been set as your email address on Trendyol. User name: ", user.getName());

        log.info("Actionlog.verifyEmail.end : ");
        return ApiResponse.<String>builder()
                .status(HttpStatus.OK.value())
                .message("Email updated successfully")
                .data("Email changed from " + oldEmail + " to " + newEmail)
                .build();
    }

    @Override
    public ApiResponse<String> deleteUser() {
        log.info("Actionlog.deleteUser.start : ");
        var userId = getCurrentUserId();
        var user = userRepository.findById(userId).orElseThrow(() -> new NotFoundException("User not found with id: " + userId));

        user.setIsActive(false);
        userRepository.save(user);
        log.info("Actionlog.deleteUser.end : ");

        return ApiResponse.<String>builder()
                .status(HttpStatus.OK.value())
                .message("User deleted successfully")
                .data("User with id " + user.getId() + " deactivated")
                .build();
    }

    @Override
    public ApiResponse<UserProfileResponse> getUserProfile() {
        log.info("Actionlog.getUserProfile.start : ");
        var userId = getCurrentUserId();
        var user = userRepository.findById(userId).orElseThrow(() -> new NotFoundException("User not found with id: " + userId));
        var response = userMapper.toUserProfileResponse(user);
        var adress = adressRepository.findByUserId(user);
        if (adress == null) adress = List.of();
        response.setAddresses(adress);
        var defaultPaymentMethod = paymentMethodRepository.findByUserId_IdAndIsDefault(user.getId(), true);
        response.setDefaultPaymentMethod(defaultPaymentMethod.orElse(null));
        var wishlistCount = wishlistRepository.findByUser(user).size();
        response.setWishlistCount(wishlistCount);
        var orderCount = orderRepository.findByUserId_Id(userId).size();
        response.setOrderCount(orderCount);
        var totalSpent = calculateTotalSpent(userId);
        if (totalSpent == null) {
            totalSpent = 0.0;
        }
        response.setTotalSpent(totalSpent);

        log.info("Actionlog.getUserProfile.end : ");

        return ApiResponse.<UserProfileResponse>builder()
                .status(HttpStatus.OK.value())
                .message("User profile retrieved successfully")
                .data(response)
                .build();
    }

    private Double calculateTotalSpent(Long userId) {
        List<Order> orders = orderRepository.findByUserId_Id(userId);
        BigDecimal totalSpent = BigDecimal.ZERO;
        for (Order order : orders) {
            totalSpent = totalSpent.add(order.getTotalAmount());
        }
        return totalSpent.doubleValue();
    }

    @Override
    public ApiResponse<String> deactiveUser(Long userId) {
        log.info("Actionlog.deactiveUser.start : ");
        var adminId = getCurrentUserId();
        var admin = userRepository.findById(adminId).orElseThrow(() -> new NotFoundException("Admin not found with id: " + adminId));
        var user = userRepository.findById(userId).orElseThrow(() -> new NotFoundException("User not found with id: " + userId));
        if (!user.getIsActive()) {
            throw new RuntimeException("User is already deactive");
        }
        user.setIsActive(false);
        userRepository.save(user);
        auditLogService.createAuditLog(user, "Deactive User", "User deactive successfully. User id: " + user.getId());
        emailService.sendEmail(user.getEmail(), "Deactive Account Info", "Your account deactive successfully. Your account name " + user.getName());
        notificationService.sendNotification(user, "Your account deactive. Your account name " + user.getName(), NotificationType.USER_DEACTIVE, user.getId());
        notificationService.sendNotification(admin, "User deactive. User name " + user.getName(), NotificationType.USER_DEACTIVE, user.getId());
        log.info("Actionlog.deactiveUser.end : ");
        return ApiResponse.<String>builder().status(HttpStatus.OK.value()).message("User deactive successfully").data("User with id " + user.getId() + " deactivated").build();
    }

//    @Override
//    public String activateUser(String email) {
//        log.info("Actionlog.activateUser.start : ");
//        var user = userRepository.findByEmail(email)
//                .orElseThrow(() -> new NotFoundException("User not found with email: " + email));
//
//        if (user.getIsActive()) {
//            throw new RuntimeException("User is already active");
//        }
//        String otp = generateOtp();
//        ResetCode resetCode = new ResetCode();
//        resetCode.setEmail(email);
//        resetCode.setCode(otp);
//        resetCode.setExpireTime(LocalDateTime.now().plusMinutes(5));
//        resetCodeRepository.save(resetCode);
//        emailService.sendOtp(email, otp);
//
//        log.info("Actionlog.activateUser.end : ");
//        return "We sent otp to your email to activate your account";
//    }
//
//    @Override
//    public String verifyReactivateOtp(String email, String otp) {
//        log.info("Actionlog.verifyReactivateOtp.start : ");
//
//        var user = userRepository.findByEmail(email)
//                .orElseThrow(() -> new NotFoundException("User not found with email: " + email));
//
//        ResetCode resetCode = resetCodeRepository.findByEmailAndCode(email, otp)
//                .orElseThrow(() -> new RuntimeException("Invalid OTP"));
//
//        if (resetCode.getExpireTime().isBefore(LocalDateTime.now())) {
//            throw new RuntimeException("OTP expired");
//        }
//        resetCodeRepository.delete(resetCode);
//        user.setIsActive(true);
//        userRepository.save(user);
//
//        log.info("Actionlog.verifyReactivateOtp.end : ");
//        return "User reactivated successfully";
//    }


    @Override
    public ApiResponse<Page<UserResponse>> searchUser(String keyword, int page, int size) {
        log.info("Actionlog.searchUser.start : ");

        Pageable pageable = PageRequest.of(page, size);
        var users = userRepository.searchByKeyword(keyword, pageable);
        if (users.isEmpty()) {
            throw new NotFoundException("User not found");
        }
        log.info("Actionlog.searchUser.end : ");
        Page<UserResponse> response = users.map(userMapper::toUserResponse);
        return ApiResponse.<Page<UserResponse>>builder()
                .data(response)
                .status(HttpStatus.OK.value())
                .message("Search User").
                build();
    }

    @Override
    public ApiResponse<List<SellerResponse>> getFollowedSellers() {
        log.info("Actionlog.getFollowedSellers.start : ");
        var userId = getCurrentUserId();
        var user = userRepository.findById(userId).orElseThrow(() -> new NotFoundException("User not found with id: " + userId));
        var followedSellers = sellerFollowRepository.findByFollower(user);

        var response = followedSellers.stream()
                .map(f -> SellerResponse.builder()
                        .taxId(f.getSeller().getTaxId())
                        .companyName(f.getSeller().getCompanyName())
                        .contactEmail(f.getSeller().getContactEmail())
                        .id(f.getSeller().getId())
                        .userId(f.getSeller().getUser().getId())
                        .status(f.getSeller().getStatus())
                        .userEmail(f.getSeller().getUser().getEmail())
                        .userName(f.getSeller().getUser().getName()
                        )
                        .build())
                .toList();

        log.info("Actionlog.getFollowedSellers.end : ");
        return ApiResponse.<List<SellerResponse>>builder()
                .data(response)
                .status(HttpStatus.OK.value())
                .message("Followed Sellers").
                build();
    }

    @Override
    public ApiResponse<String> referTrendyol(String email) throws MessagingException {
        log.info("Actionlog.referTrendyol.start : ");
        var user = userRepository.findById(getCurrentUserId()).orElseThrow(() -> new NotFoundException("User not found with id: " + getCurrentUserId()));

        var existsEmail = emailClient.checkEmailExists(email);
        if (!existsEmail) {
            throw new NotFoundException("Email not found");
        }
        emailService.sendEmailWithHtml(email, "Refer Trendyol");
        log.info("Actionlog.referTrendyol.end : ");
        auditLogService.createAuditLog(user, "Refer Trendyol", "Refer Trendyol successfully. User id: " + user.getId());
        return ApiResponse.<String>builder()
                .data("Refer Trendyol")
                .status(HttpStatus.OK.value())
                .message("Trendyol reffered successfully").
                build();
    }

    private Long getCurrentUserId() {
        return (Long) ((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes())
                .getRequest().getAttribute("userId");
    }

    private String generateOtp() {
        Random random = new Random();
        int otp = 100000 + random.nextInt(900000);
        return String.valueOf(otp);
    }


}
